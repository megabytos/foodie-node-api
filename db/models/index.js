import { readdirSync } from 'fs';
import { join, resolve } from 'path';
import sequelize from '../sequelize.js';
import Sequelize, { DataTypes, Model } from 'sequelize';

// üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –º–æ–¥–µ–ª–µ–π –±–µ–∑ `__dirname`
const modelsPath = resolve(process.cwd(), "db", "models");

// üîπ –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
const db = {};

// üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–µ–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
const modelFiles = readdirSync(modelsPath)
    .filter(file => file.endsWith('.js') && file !== 'index.js');

for (const file of modelFiles) {
    const modelModule = await import(`file://${join(modelsPath, file)}`);
    const model = modelModule.default;

    if (model.prototype instanceof Model) {
        // –ï—Å–ª–∏ —ç—Ç–æ –∫–ª–∞—Å—Å, —Ä–∞—Å—à–∏—Ä—è—é—â–∏–π Model
        model.init(model.getAttributes(DataTypes), { sequelize, modelName: model.name });
        db[model.name] = model;
    } else {
        // –ï—Å–ª–∏ —ç—Ç–æ sequelize.define()
        db[model.name] = model;
    }
}

// üîπ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
Object.values(db).forEach(model => {
    if (typeof model.associate === 'function') {
        model.associate(db);
    }
});

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
const { Recipe, Ingredient, Category, Area, RecipeIngredient, User, Testimonial, UserFavorite, UserFollower } = db;

Recipe.belongsTo(Category, { foreignKey: 'categoryId', onDelete: 'CASCADE' });
Recipe.belongsTo(User, { foreignKey: 'ownerId', onDelete: 'CASCADE' });
Recipe.belongsTo(Area, { foreignKey: 'areaId', onDelete: 'CASCADE' });

Recipe.belongsToMany(Ingredient, { through: RecipeIngredient, foreignKey: 'recipeId', onDelete: 'CASCADE' });
Ingredient.belongsToMany(Recipe, { through: RecipeIngredient, foreignKey: 'ingredientId', onDelete: 'CASCADE' });

User.hasMany(Testimonial, { foreignKey: 'userId', onDelete: 'CASCADE' });

User.belongsToMany(Recipe, { through: UserFavorite, foreignKey: 'userId', onDelete: 'CASCADE' });
User.hasMany(Recipe, { foreignKey: 'ownerId', as: 'ownedRecipes', onDelete: 'CASCADE' });

User.belongsToMany(User, { as: 'Followers', through: UserFollower, foreignKey: 'userId', onDelete: 'CASCADE' });
User.belongsToMany(User, { as: 'Following', through: UserFollower, foreignKey: 'followerId', onDelete: 'CASCADE' });
UserFollower.belongsTo(User, { foreignKey: 'followerId', as: 'Follower' });
UserFollower.belongsTo(User, { foreignKey: 'userId', as: 'User' });

db.sequelize = sequelize;
db.Sequelize = Sequelize;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å –º–æ–¥–µ–ª—è–º–∏ –∏ sequelize
export { sequelize, Recipe, Ingredient, Category, Area, RecipeIngredient, User, Testimonial, UserFavorite, UserFollower };
export default db;